<context>
# Overview  
This is a step-by-step illustrated tutorial for building an RGB++ asset staking (lock-up) application on CKB. The tutorial is designed for developers who want to learn practical blockchain development, CKB scripting, and DApp building. It addresses the lack of hands-on examples for RGB++ asset staking, helping developers quickly acquire both conceptual and technical skills in a real-world scenario.

# Core Features  
-  **Stage-based Learning**  
  The tutorial is structured into clear stages, each focusing on a distinct aspect of the staking application (from preparation to advanced features).
-  **Hands-on Guidance**  
  Each stage provides step-by-step instructions, code examples, and references, enabling developers to follow along and build as they learn.
-  **Multi-chain Context**  
  Covers both CKB and Bitcoin chain logic for asset management and staking.
-  **Practical Use Cases**  
  Includes real staking flows, frontend integration, and wallet connection, ensuring practical, end-to-end experience.
-  **Best Practice References**  
  Integrates links to official docs, community scripts, and scaffolding tools.

# User Experience  
-  **User Personas**  
  - Blockchain developers (beginner to intermediate) interested in CKB, RGB++, and asset staking.
-  **Key User Flows**  
  1. Read project introduction and prerequisites.
  2. Proceed through each tutorial stage, following instructions and implementing code.
  3. Test and validate at each checkpoint.
  4. Reference FAQ and troubleshooting as needed.
-  **UI/UX Considerations**  
  - Markdown-based, readable on GitHub and documentation sites.
  - Each stage is atomic, with clear objectives, steps, and expected outcomes.
  - Code blocks, diagrams, and links are provided for clarity.
</context>

<PRD>
# Technical Architecture  
-  **Tutorial Structure**  
  - Divided into sequential stages: Preparation, Basic Lock Script, BTC Time-lock, Frontend Integration, Scheduling, Advanced Topics.
  - Each stage includes: objectives, step-by-step instructions, code snippets, references, and notes.
-  **Content Format**  
  - Markdown for all tutorial content.
  - Code samples in Rust, JavaScript, or relevant languages.
  - Diagrams, CSV templates, and screenshots where appropriate.
-  **Integration Points**  
  - Links to official CKB docs, open source scripts, and create-ccc-app scaffolding.
  - Guidance for using JoyID wallet and CSV export.
-  **Infrastructure Requirements**  
  - None for reading; code examples require a local CKB dev environment and basic tooling.

# Development Roadmap  
-  **MVP Requirements**  
  - Stage 0: Preparation & background.
  - Stage 1: Implementing simple CKB lock scripts.
  - Stage 2: Integrating BTC time-lock logic.
  - Stage 3: Frontend development (wallet connect, staking UI).
  - Stage 4: Scheduling and sending logic.
  - Stage 5+: Advanced topics (DOB locking, fungible staking receipts).
-  **Future Enhancements**  
  - More advanced staking features (multi-asset, batch operations).
  - Additional visual guides, video walkthroughs, and real-world examples.
  - Community-contributed FAQ and troubleshooting expansion.

# Logical Dependency Chain
-  Start with core concepts and environment setup.
-  Progress to basic lock script implementation.
-  Add multi-chain and frontend integration.
-  Introduce advanced features only after previous stages are complete.
-  Each stage builds upon the last, enabling incremental learning and implementation.

# Risks and Mitigations  
-  **Technical Challenges**  
  - Developers may face cross-chain integration difficulties; mitigated by providing references and sample code.
-  **MVP Scope**  
  - Focus on a clear, working lock-up flow before adding advanced features.
-  **Resource Constraints**  
  - Limited existing RGB++ staking examples; addressed by step-by-step breakdown and community links.

# Appendix  
-  **References**  
  - [Build a Simple Lock](https://docs.nervos.org/docs/dapp/simple-lock)
  - [Time lock script for Nervos Network](https://github.com/Hanssen0/ckb-script-time-lock)
  - [create-ccc-app scaffolding](https://github.com/ckb-js/create-ccc-app)
-  **Tutorial Stages**  
  - Stage 0: Preparation & research
  - Stage 1: CKB basic lock-up script
  - Stage 2: BTC time-lock integration
  - Stage 3: Frontend and wallet integration
  - Stage 4: Scheduling and sending
  - Stage 5+: Advanced topics (DOB locking, fungible staking receipt token, UDTStakeable)
</PRD>
